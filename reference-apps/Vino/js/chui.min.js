'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Stack = function() {
    function Stack(args) {
        _classCallCheck(this, Stack);

        this.array = [];
        this.length = 0;
        this.type = 'stack';
        if (args && args === document) {
            this.array[0] = document;
            this[0] = document;
        } else if (Array.isArray(args)) {
            var i = -1;
            var len = args.length;
            while (++i < len) {
                this.array[i] = args[i];
            }
        } else {
            var array = Array.prototype.slice.apply(arguments);
            array.forEach(function(ctx, idx) {
                this.array[idx] = ctx;
            });
        }
    }

    _createClass(Stack, [{
        key: 'eq',
        value: function eq(index) {
            var ret = new Stack();
            if (!this.array.length) return ret;
            var temp = void 0;
            if (index < 0) {
                temp = this.array[this.array.length + index];
                ret.push(temp);
            } else {
                if (index >= this.array.length) return new Stack();
                temp = this.array[index];
                ret.push(temp);
            }
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'push',
        value: function push(data) {
            if (data && data.objectType === 'Stack') {
                this.array = this.array.concat(data.array);
                this[0] = this.array;
            } else {
                this.array.push(data);
            }
        }
    }, {
        key: 'pop',
        value: function pop() {
            var ret = this.array.pop();
            ret = $(ret);
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'unshift',
        value: function unshift(data) {
            if (data && data.objectType === 'Stack') {
                this.array.unshift(data.array[0]);
                this[0] = this.array[0];
            } else {
                this.array.unshift(data);
                this[0] = this.array[0];
            }
        }
    }, {
        key: 'shift',
        value: function shift() {
            var ret = this.array.shift();
            ret = $(ret);
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'forEach',
        value: function forEach(callback) {
            var value = void 0;
            var i = 0;
            var len = this.array.length;
            for (; i < len; i++) {
                value = callback.call(this.array[i], this.array[i], i);
                if (value === false) {
                    break;
                }
            }
        }
    }, {
        key: 'slice',
        value: function slice() {
            var ret = new Stack();

            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            ret.concat(this.array.slice.apply(this.array, args));
            ret = $(ret);
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'splice',
        value: function splice() {
            var ret = new Stack();

            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            ret.concat(this.array.splice.apply(this.array, args));
            ret = $(ret);
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'filter',
        value: function filter() {
            var ret = new Stack();

            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            ret.concat(this.array.filter.apply(this.array, args));
            ret[0] = ret.array[0];
            ret = $(ret);
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'map',
        value: function map() {
            var ret = new Stack();

            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                args[_key5] = arguments[_key5];
            }

            ret.concat(this.array.map.apply(this.array, args));
            ret[0] = ret.array[0];
            ret = $(ret);
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'indexOf',
        value: function indexOf(node) {
            if (!node) return -1;
            if (node.nodeType && node.nodeType === 1) {
                return this.array.indexOf(node);
            } else if (node && node.objectType === 'Stack') {
                return this.array.indexOf(node[0]);
            } else if (node && Array.isArray(node)) {
                return this.array.indexOf(node[0]);
            } else if (node && $.type(node) === 'string') {
                var _el = this[0].parentNode.querySelector(node);
                return this.array.indexOf(_el);
            }
        }
    }, {
        key: 'concat',
        value: function concat(collection) {
            var self = this;
            if (collection && Array.isArray(collection.array)) {
                this.array = this.array.concat(collection.array);
            } else if (collection && collection.constructor.toString().match(/HTMLLIElement/)) {
                this.array.push(collection);
            } else if (collection && Array.isArray(collection)) {
                collection.forEach(function(item) {
                    self.array.push(item);
                });
            }
        }
    }, {
        key: 'reverse',
        value: function reverse() {
            for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                args[_key6] = arguments[_key6];
            }

            this.array.reverse.apply(this.array, args);
            this[0] = this.array[0];
        }
    }, {
        key: 'unique',
        value: function unique() {
            var ret = [];
            var sort = this.array.sort();
            sort.forEach(function(ctx) {
                if (ret.indexOf(ctx) === -1) {
                    ret.push(ctx);
                }
            });
            ret.sort(function(a, b) {
                return a - b;
            });
            this.array.splice(0);
            var self = this.array;
            ret.forEach(function(node) {
                self.push(node);
            });
        }
    }, {
        key: 'purge',
        value: function purge() {
            this.array.length = 0;
        }
    }, {
        key: 'find',
        value: function find(selector, context) {
            var ret = new Stack();
            var matches = void 0;
            if (!this.array.length) return ret;
            if (context) {
                $(context).forEach(function() {
                    matches = Array.prototype.slice.apply(context.querySelectorAll(selector));
                    matches.forEach(function(node) {
                        ret.array.push(node);
                    });
                });
            } else {
                this.forEach(function(ctx) {
                    if (ctx && ctx.children && ctx.children.length) {
                        matches = Array.prototype.slice.apply(ctx.querySelectorAll(selector));
                        matches.forEach(function(node) {
                            ret.array.push(node);
                        });
                    }
                });
            }
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'is',
        value: function is(arg) {
            var ret = false;
            if (!this.array.length || !arg) return;
            if (!this.array.length) return;
            var self = this;
            var __is = function __is(node, arg) {
                if (typeof arg === 'string') {
                    var nodes = void 0;
                    if (node.parentNode) nodes = node.parentNode.querySelectorAll(arg);
                    var elements = void 0;
                    if (nodes && nodes.length) {
                        elements = Array.prototype.slice.apply(node.parentNode.querySelectorAll(arg));
                    }
                    if (elements && elements.length) {
                        if (elements.indexOf(node) >= 0) {
                            ret = true;
                        }
                    }
                } else if (typeof arg === 'function') {
                    if (arg.call(self)) {
                        ret = true;
                    }
                } else if (arg && arg.type && arg.type === 'Stack') {
                    if (node === arg[0]) {
                        ret = true;
                    }
                } else if (arg && arg.length) {
                    if (this.slice.apply(arg).indexOf(node) !== -1) {
                        ret = true;
                    }
                } else if (arg.nodeType === 1) {
                    if (node === arg) {
                        ret = true;
                    }
                } else {
                    return;
                }
                return ret;
            };
            this.forEach(function(item) {
                if (__is(item, arg)) {
                    ret = true;
                }
            });
            return ret;
        }
    }, {
        key: 'index',
        value: function index(selector) {
            var self = this.array;
            if (!this.array.length) {
                return;
            }

            function getIndex() {
                var result = self.findIndex(function(el) {
                    return $(el).is(selector);
                });
                return result;
            }

            if (selector && typeof selector === 'string') {
                return getIndex(selector);
            } else if (selector && selector.type && selector.type === 'Stack') {
                return getIndex(selector[0]);
            } else if (selector && selector.nodeType && selector.nodeType === 1) {
                return getIndex(selector);
            } else {
                if (self.length > 1) {
                    return 0;
                }
                var siblings = Array.prototype.slice.apply(self[0].parentNode.children);
                return siblings.findIndex(function(el) {
                    return el === self[0];
                });
            }
        }
    }, {
        key: 'siblings',
        value: function siblings(selector) {
            if (!this.array.length) return new Stack();
            var __siblings = void 0;
            var ret = new Stack();
            var self = this;
            var pos = this.index();
            var parent = void 0;
            var children = Array.prototype.slice.apply(self.array[0].parentNode.children);
            if (selector && typeof selector === 'string') {
                parent = this.array[0].parentNode;
                __siblings = Array.prototype.slice.apply(parent.querySelectorAll(selector));
                var newPos = __siblings.indexOf(self.array[0]);
                __siblings.splice(newPos, 1);
                ret.concat(__siblings);
                ret[0] = ret.array[0];
                return ret;
            } else {
                children.splice(pos, 1);
                ret.array = children;
                ret[0] = ret.array[0];
                return ret;
            }
        }
    }, {
        key: 'closest',
        value: function closest(selector) {
            if (!this.array.length) {
                console.log('nothing to find here');
                return new Stack();
            }
            var ret = new Stack();
            if (typeof selector === 'undefined') {
                return new Stack();
            }
            var p = void 0;
            if (this.array[0]) {
                p = this.array[0].parentNode;
            }
            if (!p) {
                return new Stack();
            }
            if (typeof selector === 'string') {
                selector.trim();
                if (p && $(p).is(selector)) {
                    ret.array.push(p);
                } else {
                    ret.array.push($(p).closest(selector).array[0]);
                }
            }
            if (ret.array[0] === undefined) {
                ret.splice(0);
            }
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'css',
        value: function css(property, value) {
            if (!this.array.length) return new Stack();
            var pixelRE = /top|bottom|left|right|margin|padding/img;
            var postFix = '';
            var ret = new Stack();
            var testForPixelSupport = function testForPixelSupport(value, property) {
                if (value === 'number' && property.match(pixelRE)) {
                    postFix = 'px';
                }
            };
            if (!property) return new Stack();
            if (!value && (typeof property === 'undefined' ? 'undefined' : _typeof(property)) === 'object' && !Array.isArray(property)) {
                this.forEach(function(node) {
                    for (var key in property) {
                        if (property.hasOwnProperty(key)) {
                            testForPixelSupport(property[key], key);
                            node.style[$.camelize(key)] = property[key] + postFix;
                        }
                    }
                    ret.push(node);
                });
            } else if (!value && typeof property === 'string') {
                if (!this.array.length) return;
                return document.defaultView.getComputedStyle(this.eq(0).array[0], null).getPropertyValue(property.toLowerCase());
            } else if (!!value) {
                this.forEach(function(node) {
                    testForPixelSupport(value, property);
                    node.style[$.camelize(property)] = value + postFix;
                    ret.push(node);
                });
            }
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'before',
        value: function before(content) {
            if (!this.array || !this.array.length) {
                return new Stack();
            }
            var self = this;
            var __before = function __before(node, content) {
                if (typeof content === 'string' || typeof content === 'number') {
                    content = $.h(content);
                }
                if (content && content.type && content.type === 'Stack') {
                    var len = content.size();
                    var i = 0;
                    while (i < len) {
                        node.parentNode.insertBefore(content.array[i], node);
                        i++;
                    }
                } else if (content && content.nodeType === 1) {
                    node.parentNode.insertBefore(content, node);
                } else if (content && content.nodeType == 11) {
                    self.forEach(function() {
                        node.parentNode.insertBefore(content, node);
                    });
                }
                self[0] = self.array[0];
                return self;
            };
            self.forEach(function(node) {
                return __before(node, content);
            });
            self[0] = self.array[0];
            return this;
        }
    }, {
        key: 'after',
        value: function after(content) {
            if (!this.array || !this.array.length) return new Stack();
            var self = this;
            var __after = function __after(node, content) {
                var parent = node.parentNode;
                if (typeof content === 'string' || typeof content === 'number') {
                    content = $.h(content);
                }
                if (content && content.type && content.type === 'Stack') {
                    var i = 0,
                        len = content.size();
                    while (i < len) {
                        if (node === parent.lastChild) {
                            parent.appendChild(content.array[i]);
                        } else {
                            parent.insertBefore(content.array[i], node.nextSibling);
                        }
                        i++;
                    }
                } else if (content && content.nodeType === 1) {
                    parent.appendChild(content);
                } else if (content && content.nodeType == 11) {
                    self.forEach(function(p) {
                        p.appendChild(content);
                    });
                }
                self[0] = self.array[0];
                return self;
            };
            self.forEach(function(node) {
                return __after(node, content);
            });
            self[0] = this.array[0];
            return self;
        }
    }, {
        key: 'prepend',
        value: function prepend(content) {
            if (!this.array.length) return new Stack();

            if (typeof content === 'string' || typeof content === 'number') {
                this.forEach(function(element) {
                    element.insertAdjacentHTML('afterbegin', content);
                });
            } else if (content && content.type && content.type === 'Stack') {
                this.forEach(function(element) {
                    content.forEach(function(node) {
                        element.insertBefore(node, element.firstChild);
                    });
                });
            } else if (content && content.nodeType === 1) {
                this.forEach(function(element) {
                    element.insertBefore(content, element.firstChild);
                });
            } else if (content && content.nodeType == 11) {
                this.forEach(function(element) {
                    element.appendChild(content);
                });
            }
            this[0] = this.array[0];
            return this;
        }
    }, {
        key: 'append',
        value: function append(content) {
            if (!this.array.length) return new Stack();

            if (typeof content === 'string' || typeof content === 'number') {
                this.forEach(function(element) {
                    element.insertAdjacentHTML('beforeend', content);
                });
            } else if (content && content.type && content.type === 'Stack') {
                this.forEach(function(element) {
                    content.forEach(function(node) {
                        element.insertBefore(node, null);
                    });
                });
            } else if (content && content.nodeType === 1) {
                this.forEach(function(element) {
                    element.insertBefore(content, null);
                });
            } else if (content && content.nodeType == 11) {
                this.forEach(function(element) {
                    element.appendChild(content);
                });
            }
            this[0] = this.array[0];
            return this;
        }
    }, {
        key: 'empty',
        value: function empty() {
            if (!this.array.length) return new Stack();
            var ret = new Stack();
            this.array.forEach(function(ctx) {
                ctx.textContent = '';
                ret.push(ctx);
            });
            ret[0] = ret.array[0];
            return ret;
        }
    }, {
        key: 'replaceWith',
        value: function replaceWith(content) {
            function replace(newElement, targetElement) {
                if (!newElement || !targetElement) return;
                var newEl = void 0;
                var targEl = void 0;
                if (typeof newElement === 'string') {
                    newEl = $.h(newElement);
                } else if (newElement.type && newElement.type === 'stack') {
                    newEl = newElement.array[0];
                } else if (newElement.nodeType === 1 || newElement.nodeType === 11) {
                    newEl = newElement;
                }
                if (typeof targetElement === 'string') {
                    targEl = $(targetElement).array[0];
                } else if (targetElement.type && targetElement.type === 'stack') {
                    targEl = targetElement.array[0];
                } else if (targetElement.nodeType === 1) {
                    targEl = targetElement;
                }
                /**
                 * Remove target's bound events:
                 */
                $(targEl).off();
                targEl.parentNode.replaceChild(newEl, targEl);
            }
            if (content && content.nodeType && content.nodeType === 1) {
                $(content).off();
            } else if (content && content.type && content.type === 'stack') {
                content.off();
            }
            this.forEach(function(node) {
                $(node).off();
                replace(content, node);
            });
        }
    }, {
        key: 'remove',
        value: function remove() {
            if (!this.array.length) return new Stack();
            this.forEach(function(node) {
                $(node).off();
                if (node.parentNode) node.parentNode.removeChild(node);
            });
        }
    }, {
        key: 'text',
        value: function text(string) {
            var ret = '';
            if (!this.array.length) return new Stack();
            if (!!string || string === 0) {
                this.forEach(function(element) {
                    element.innerText = string;
                });
                return this;
            } else {
                this.forEach(function(element) {
                    ret += element.innerText;
                    ret.trim();
                });
                return ret;
            }
        }
    }, {
        key: 'html',
        value: function html(markup) {
            if (!this.array.length) return new Stack();
            if (markup === '') {
                this.array.forEach(function(node) {
                    node.innerHTML = '';
                });
                return this;
            } else if (markup) {
                this.array.forEach(function(node) {
                    node.innerHTML = markup;
                });
                return this;
            } else if (!markup) {
                return this.array[0].innerHTML.trim();
            }
        }
    }, {
        key: 'val',
        value: function val(value) {
            if (!this.array.length) return new Stack();
            if (value || value === '') {
                this.array[0].value = value;
                this[0] = this.array[0];
                return this;
            } else {
                if (this.array[0] && this.array[0].value) {
                    return this.array[0].value;
                }
            }
        }
    }, {
        key: 'hide',
        value: function hide() {
            if (this.array.length) {
                this.array[0].dataset.display = this.css('display');
                this.css('display', 'none');
            }
        }
    }, {
        key: 'show',
        value: function show() {
            if (this.array.length) {
                var display = this.array[0].dataset.display;
                if (display) {
                    this.css('display', display);
                } else {
                    this.css('display', 'block');
                }
            }
        }
    }]);

    return Stack;
}();

window.Stack = Stack;

function $(selector) {
    var readyRE = /complete|loaded|interactive/;
    var temp = void 0;

    var slice = function slice(elements) {
        temp = new Stack([].slice.apply(elements));
        temp[0] = temp.array[0];
        return temp;
    };

    var getNode = function getNode(selector) {
        if (typeof selector === 'string') {
            selector = selector.trim();
            temp = slice(document.querySelectorAll(selector));
            return temp;
        }
    };

    if (selector && selector.type && selector.type === 'Stack') {
        return selector;
    }

    if (selector === document) {
        return new Stack(document);
    }

    if (selector === null) {
        return new Stack();
    }

    if (typeof selector === 'function') {
        if (readyRE.test(document.readyState) && document.body) {
            selector.call(selector);
        } else {
            document.addEventListener("DOMContentLoaded", function() {
                return selector.call(selector);
            });
        }
    } else if (selector && selector.nodeType === 1) {
        temp = new Stack();
        temp[0] = selector;
        temp.length = temp.array.length;
        temp.push(selector);
        return temp;
    } else if (typeof selector === 'string') {
        if (selector === '') return new Stack();
        try {
            return getNode(selector) ? getNode(selector) : new Stack();
        } catch (err) {
            return new Stack();
        }
    } else if (Array.isArray(selector)) {
        return new Stack(selector);
    } else if (selector === window) {
        temp = new Stack();
        temp[0] = window;
        temp.length = temp.array.length;
        return temp;
    } else {
        return new Stack();
    }

    return new Stack();
}
window.$ = $;

$.extend = function(obj, prop) {
    if (!prop) {
        prop = obj;
        obj = $;
    }
    Object.keys(prop).forEach(function(p) {
        if (prop.hasOwnProperty(p)) {
            Object.defineProperty(obj, p, {
                value: prop[p],
                writable: true,
                enumerable: false,
                configurable: true
            });
        }
    });
};

$.fn = {
    extend: function extend(object) {
        $.extend(Stack.prototype, object);
    }
};

$.extend({

    version: '5.0.3',

    noop: function noop() {
        return;
    },

    uuid: function uuid() {
        var d = Date.now();
        d += performance.now();
        var charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split('');
        var randomLetter = charset[Math.floor(Math.random() * charset.length)];
        return randomLetter + 'xxxxxxxxxxxxxxx'.replace(/[x]/g, function(c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
        });
    },

    type: function type(_type) {
        switch (typeof _type === 'undefined' ? 'undefined' : _typeof(_type)) {
            case 'boolean':
                return 'boolean';
            case 'number':
                return 'number';
            case 'string':
                return 'string';
            case 'function':
                return 'function';
            case 'object':
                if (Array.isArray(_type)) {
                    return 'array';
                } else if (Object.prototype.toString.call(_type) === '[object Date]') {
                    return 'date';
                } else if (Object.prototype.toString.call(_type) === '[object Error]') {
                    return 'error';
                } else if (Object.prototype.toString.call(_type) === '[object RegExp]') {
                    return 'regexp';
                } else if (Object.prototype.toString.call(_type) === '[object Object]') {
                    if (_type.objectType && _type.objectType === 'domstack') {
                        return 'domstack';
                        /* If Promise polyfill, then should support `then`. */
                    } else if (_type.then) {
                        return 'promise';
                        /* Otherwise we got a normal object here. */
                    } else {
                        return 'object';
                    }
                } else if (Object.prototype.toString.call(_type) === '[object Number]') {
                    return 'number';
                } else if (Object.prototype.toString.call(_type) === '[object String]') {
                    return 'string';
                } else if (Object.prototype.toString.call(_type) === '[object Promise]') {
                    return 'promise';
                } else if (Object.prototype.toString.call(_type) === '[object Boolean]') {
                    return 'boolean';
                }
        }
    },

    escapeHTML: function escapeHTML(data) {
        var tagsToReplace = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '(': '%28',
            ')': '%29'
        };

        var str = JSON.stringify(data);

        var replaceTag = function replaceTag(tag) {
            return tagsToReplace[tag] || tag;
        };

        var safe_tags_replace = function safe_tags_replace(str) {
            return str.replace(/[&<>\(\)]/g, replaceTag);
        };

        str = safe_tags_replace(str);
        return JSON.parse(str);
    },

    camelize: function camelize(string) {
        if (typeof string !== 'string') return;
        return string.replace(/\-(.)/g, function(match, letter) {
            return letter.toUpperCase();
        });
    },

    hyphenate: function hyphenate(string) {
        if (typeof string !== 'string') return;
        return string.replace(/([A-Z])/g, '-$1').toLowerCase();
    },

    subscriptions: {},

    publish: function publish(subscription, payload) {
        var hasProp = $.subscriptions.hasOwnProperty;
        if (!hasProp.call($.subscriptions, subscription)) return;

        $.subscriptions[subscription].forEach(function(item) {
            item(payload != undefined ? payload : {});
        });
    },

    subscribe: function subscribe(subscription, handler) {
        if (!$.subscriptions.hasOwnProperty.call($.subscriptions, subscription)) $.subscriptions[subscription] = [];
        var index = $.subscriptions[subscription].push(handler) - 1;
        return {
            off: function off() {
                delete $.subscriptions[subscription][index];
            },

            run: function run(data) {
                if ($.subscriptions[subscription]) {
                    try {
                        $.subscriptions[subscription][index](data);
                    } catch (err) {}
                }
            }
        };
    },

    unsubscribe: function unsubscribe(subscription) {
        delete $.subscriptions[subscription];
    },

    delay: function delay(milliseconds) {
        return new Promise(function(resolve) {
            setTimeout(resolve, milliseconds);
        });
    },

    h: function h(template) {
        var temp = document.createElement('div');
        temp.innerHTML = template;
        var frag = document.createDocumentFragment
        // Use childNodes to allow creating element nodes or text nodes:
        ();
        var children = Array.prototype.slice.apply(temp.childNodes);
        children.map(function(el) {
            frag.appendChild(el);
        });
        return frag;
    }
});

function html(literals) {
    var raw = literals.raw;
    var result = '';
    var i = void 0;
    var len = void 0;
    var sub = void 0;
    var lit = void 0;
    var safe = void 0;

    /**
     * Function that normalizes interpolation substitions.
     * It flattens arrays while ignoring falsey values.
     * All other values are converted to strings.
     */
    function normalize(value, safe) {
        return value == null ? '' : value === false ? '' : Array.isArray(value) ? value.map(normalize).join('') : safe === false ? $.escapeHTML(value) : String(value);
    }

    for (i = 1, len = arguments.length; i < len; i++) {
        lit = raw[i - 1];
        /**
         * Allow safe html by prefixing interpolation with an exclamation mark.
         */
        safe = lit[lit.length - 1] === '!';
        sub = normalize(arguments[i], safe);
        if (safe) lit = lit.slice(0, -1);

        result += lit + sub;
    }

    // Take care of last literal section.
    result += raw[raw.length - 1];

    return result;
}
window.html = html;

function app(callback) {
    $(function() {
        callback();
    });
}
window.app = app;

$(function() {
    if (!/(mobile)|(ios)|(android)/img.test(navigator.userAgent)) {
        document.body.classList.add('isDesktop');
    }
    if ($('link[href*=ios]')[0]) {
        document.body.classList.add('themeIsiOS');
        $.theme = 'ios';
    } else if ($('link[href*=android]')[0]) {
        document.body.classList.add('themeIsAndroid');
        $.theme = 'android';
    }
    $.dir = 'ltr';
    if (document.dir === 'rtl') {
        $.dir = 'rtl';
    }

    if (!Array.prototype.unique) {
        $.extend(Array.prototype, {
            unique: function unique() {
                var len = this.length;
                var obj = {};
                var ret = [];
                for (var i = 0; i < len; i++) {
                    var arrayItem = JSON.stringify(this[i]);
                    var arrayItemValue = this[i];
                    if (obj[arrayItem] === undefined) {
                        ret.push(arrayItemValue);
                        obj[arrayItem] = 1;
                    } else {
                        obj[arrayItem]++;
                    }
                }
                this.length = 0;
                var self = this;
                ret.forEach(function(item) {
                    self.push(item);
                });
            }
        });
    }
});

function html(literals) {
    var raw = literals.raw;
    var result = '';
    var i = void 0;
    var len = void 0;
    var sub = void 0;
    var lit = void 0;
    var safe = void 0;

    /**
     * Function that normalizes interpolation substitions.
     * It flattens arrays while ignoring falsey values.
     * All other values are converted to strings.
     */
    function normalize(val, safe) {
        return val == null ? '' : val === false ? '' : Array.isArray(val) ? val.map(normalize).join('') : safe === false ? $.escapeHTML(val) : String(val);
    }

    for (i = 1, len = arguments.length; i < len; i++) {
        lit = raw[i - 1];
        /**
         * Allow safe html by prefixing interpolation with an exclamation mark.
         */
        safe = lit[lit.length - 1] === '!';
        sub = normalize(arguments[i], safe);
        if (safe) lit = lit.slice(0, -1);

        result += lit + sub;
    }

    // Take care of last literal section.
    result += raw[raw.length - 1];

    return result;
}

$.extend({
    eventStart: null,
    eventEnd: null,
    eventMove: null,
    eventCancel: null,
    gestureLength: 30
});

$(function() {
    /* Setup Event Variables */
    /* Pointer events for IE10 and WP8: */
    if (window.navigator.pointerEnabled) {
        $.eventStart = 'pointerdown';
        $.eventEnd = 'pointerup';
        $.eventMove = 'pointermove';
        $.eventCancel = 'pointercancel';
        /* Pointer events for IE10 and WP8: */
    } else if (window.navigator.msPointerEnabled) {
        $.eventStart = 'MSPointerDown';
        $.eventEnd = 'MSPointerUp';
        $.eventMove = 'MSPointerMove';
        $.eventCancel = 'MSPointerCancel';
        /* Touch events for iOS & Android: */
    } else if ('ontouchstart' in window && /mobile/img.test(navigator.userAgent)) {
        $.eventStart = 'touchstart';
        $.eventEnd = 'touchend';
        $.eventMove = 'touchmove';
        $.eventCancel = 'touchcancel';
        /* Mouse events for desktop: */
    } else {
        $.eventStart = 'mousedown';
        $.eventEnd = 'click';
        $.eventMove = 'mousemove';
        $.eventCancel = 'mouseout';
    }
});

(function() {

    var ChuiEventCache = {
        elements: {}

        /**
         * Private method to set events on ChuiEventCache
         */
    };
    var bind = function bind(element, event, callback, capturePhase) {
        if (!element.id) element.id = $.uuid();
        if (!ChuiEventCache.elements[element.id]) {
            ChuiEventCache.elements[element.id] = [];
        }
        ChuiEventCache.elements[element.id].push({
            event: event,
            callback: callback
        });
        element.addEventListener(event, callback, capturePhase);
    };

    /**
     * Delete items from event stack:
     */
    var deleteFromEventStack = function deleteFromEventStack(toDelete, evtStck) {
        var len = toDelete.length;
        for (var i = 0; len > i; len--) {
            evtStck.splice(toDelete[len - 1], 1);
        }
    };

    /**
     * Private method to unbind events on ChuiEventCache
     */
    var unbind = function unbind(element, event, callback) {

        var eventStack = ChuiEventCache.elements[element.id];
        if (!eventStack) return;
        var deleteOrder = [];

        if (!event) {
            deleteOrder = [];
            eventStack.forEach(function(evt, idx) {
                element.removeEventListener(evt.event, evt.callback, evt.capturePhase);
                deleteOrder.push(idx);
            });

            deleteFromEventStack(deleteOrder, eventStack);
        } else if (!!event && !callback) {
            deleteOrder = [];
            eventStack.forEach(function(evt, idx) {
                if (evt.event === event) {
                    element.removeEventListener(evt.event, evt.callback, evt.capturePhase);
                    deleteOrder.push(idx);
                }
            });

            deleteFromEventStack(deleteOrder, eventStack);
        } else if (callback) {
            deleteOrder = [];
            eventStack.forEach(function(evt, idx) {
                if (callback === evt.callback) {
                    element.removeEventListener(evt.event, evt.callback, evt.capturePhase);
                    deleteOrder.push(idx);
                }
            });
            deleteFromEventStack(deleteOrder, eventStack);
        }
    };

    /**
     * Set delegated events on ChuiEventCache
     */
    var delegate = function delegate(element, selector, event, callback, capturePhase) {
        var delegateElement = $(element).array[0];
        $(element).forEach(function(ctx) {
            $(ctx).on(event, function(e) {
                var target = e.target;
                if (e.target.nodeType === 3) {
                    target = e.target.parentNode;
                }
                $(ctx).find(selector).forEach(function(delegateElement) {
                    if (delegateElement === target) {
                        callback.call(delegateElement, e);
                    } else {
                        try {
                            var ancestor = $(target).closest(selector);
                            if (delegateElement === ancestor.array[0]) {
                                callback.call(delegateElement, e);
                            }
                        } catch (err) {}
                    }
                });
            }, capturePhase);
        });
    };

    /**
     * Method to remove delegated events from ChuiEventCache:
     */
    var undelegate = function undelegate(element, selector, event, callback, capturePhase) {

        unbind($(element).array[0], event, callback, capturePhase);
    };

    $.fn.extend({
        on: function on(event, selector, callback, capturePhase) {
            if (!event) {
                return;
            }
            if (!selector) {
                return;
            }
            if (!selector && /Object/img.test(event.constructor.toString())) {
                this.forEach(function(element) {
                    for (var key in event) {
                        if (event.hasOwnProperty(key)) {
                            $(element).on(key, event[key]);
                        }
                    }
                });
            }
            var ret = [];
            var events = void 0;
            if (typeof event === 'string') {
                event = event.trim();
                if (/\s/.test(event)) {
                    events = event.split(' ');
                    this.forEach(function(ctx) {
                        events.forEach(function(evt) {
                            if (typeof selector === 'function') {
                                bind(ctx, evt, selector, callback);
                                ret.push(ctx);
                            } else {
                                delegate(ctx, selector, evt, callback, capturePhase);
                            }
                        });
                    });
                }
            }
            this.forEach(function(ctx) {
                if (typeof selector === 'function') {
                    return bind(ctx, event, selector, callback);
                } else {
                    delegate(ctx, selector, event, callback, capturePhase);
                }
            });
            return this;
        },

        off: function off(event, selector, callback, capturePhase) {
            var ret = new Stack();
            if (!this.array.length) return ret;

            this.forEach(function(ctx) {
                if (typeof event === 'undefined') {
                    ret.push(ctx);
                    unbind(ctx);
                    return ret;
                } else if (typeof selector === 'function' || !selector) {
                    unbind(ctx, event, selector, callback, capturePhase);
                    return this;
                } else {
                    undelegate(ctx, selector, event, callback, capturePhase);
                    return this;
                }
            });
        },

        trigger: function trigger(event, data) {
            if (!event) {
                return;
            }
            if (!this.array.length) return new Stack();
            this.forEach(function(ctx) {
                if (document.createEvent) {
                    var evtObj = document.createEvent('Events');
                    evtObj.initEvent(event, true, false);
                    evtObj.data = data;
                    ctx.dispatchEvent(evtObj);
                }
            });
        }
    });
})();

(function() {
    "use strict";

    var touch = {};
    var touchTimeout = void 0;
    var swipeTimeout = void 0;
    var tapTimeout = void 0;
    var longTapDelay = 750;
    var singleTapDelay = 150;
    var gestureLength = 50;
    if ($.isAndroid) singleTapDelay = 200;
    var longTapTimeout = void 0;

    function parentIfText(node) {
        return 'tagName' in node ? node : node.parentNode;
    }

    function swipeDirection(x1, x2, y1, y2) {
        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'left' : 'right' : y1 - y2 > 0 ? 'up' : 'down';
    }

    function longTap() {
        longTapTimeout = null;
        if (touch.last) {
            try {
                if (touch && touch.el) {
                    touch.el.trigger('longtap');
                    touch = {};
                }
            } catch (err) {}
        }
    }

    function cancelLongTap() {
        if (longTapTimeout) clearTimeout(longTapTimeout);
        longTapTimeout = null;
    }

    function cancelAll() {
        if (touchTimeout) clearTimeout(touchTimeout);
        if (tapTimeout) clearTimeout(tapTimeout);
        if (swipeTimeout) clearTimeout(swipeTimeout);
        if (longTapTimeout) clearTimeout(longTapTimeout);
        touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null;
        touch = {};
    }

    $(function() {
        var now = void 0;
        var delta = void 0;
        var body = document.body;
        var twoTouches = false;

        body.addEventListener($.eventStart, function(e) {
            now = Date.now();
            delta = now - (touch.last || now);
            if (e.originalEvent) e = e.originalEvent;

            if ($.eventStart === 'mousedown') {
                touch.el = $(parentIfText(e.target));
                if (e.target.nodeName === 'ripple') {
                    touch.el = $(el.target.parentNode);
                }
                touchTimeout && clearTimeout(touchTimeout);
                touch.x1 = e.pageX;
                touch.y1 = e.pageY;
                twoTouches = false;
            } else {
                if (e.touches.length === 1) {
                    touch.el = $(parentIfText(e.touches[0].target));
                    touchTimeout && clearTimeout(touchTimeout);
                    touch.x1 = e.touches[0].pageX;
                    touch.y1 = e.touches[0].pageY;
                    if (e.targetTouches.length === 2) {
                        twoTouches = true;
                    } else {
                        twoTouches = false;
                    }
                }
            }

            if (delta > 0 && delta <= 250) {
                touch.isDoubleTap = true;
            }
            touch.last = now;
            longTapTimeout = setTimeout(longTap, longTapDelay);
        });

        body.addEventListener($.eventMove, function(e) {
            if (e.originalEvent) e = e.originalEvent;
            cancelLongTap();
            if ($.eventMove === 'mousemove') {
                touch.x2 = e.pageX;
                touch.y2 = e.pageY;
            } else {

                if (e.touches.length === 1) {
                    touch.x2 = e.touches[0].pageX;
                    touch.y2 = e.touches[0].pageY;
                }
            }
        });

        body.addEventListener($.eventEnd, function() {

            cancelLongTap();
            if (!!touch.el) {
                if (touch.x2 && Math.abs(touch.x1 - touch.x2) > gestureLength || touch.y2 && Math.abs(touch.y1 - touch.y2) > gestureLength) {
                    swipeTimeout = setTimeout(function() {
                        if (touch && touch.el) {
                            touch.el.trigger('swipe');
                            touch.el.trigger('swipe' + swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2));
                            touch = {};
                        }
                    }, 0);
                } else if ('last' in touch) {
                    tapTimeout = setTimeout(function() {
                        if (touch && touch.isDoubleTap) {
                            if (touch && touch.el) {
                                touch.el.trigger('dbltap');
                                touch = {};
                            }
                        } else {
                            touchTimeout = setTimeout(function() {
                                touchTimeout = null;
                                if (touch && touch.el) {
                                    touch.el.trigger('tap');
                                    touch = {};
                                    return false;
                                }
                            }, singleTapDelay);
                        }
                    }, 0);
                }
            } else {
                return;
            }
        });
        body.addEventListener('touchcancel', cancelAll);
    });

    ['tap', 'dbltap', 'longtap', 'swipeleft', 'swiperight', 'swipeup', 'swipedown'].forEach(function(_method) {
        $.fn.extend({
            method: function method(callback) {
                return this.on(_method, callback);
            }
        });
    });
})();

var Component = function() {
    function Component(options) {
        _classCallCheck(this, Component);

        if (!options) return;
        if (typeof options.element === 'string') {
            this.elm = $(options.element);
        } else if (options.element && options.element.nodeType) {
            this.elm = $(options.element);
        } else {
            this.elm = options.element;
        }
        this.origElement = options.element;
        this.renderFnc = options.render;
        this.state = options.state;
        if (this.state) {
            this.state.boundComponents.push(this);
        }
        this.actions = options.actions;
        this.styles = options.styles;
        this.id = options.id || Math.random().toString(16).substr(2, 10);

        this.chuiStyle = function() {
            var sharedSheet = null;

            var unitlessProps = {
                columnCount: true,
                fillOpacity: true,
                flex: true,
                flexGrow: true,
                flexShrink: true,
                fontWeight: true,
                lineClamp: true,
                lineHeight: true,
                opacity: true,
                order: true,
                orphans: true,
                widows: true,
                zIndex: true,
                zoom: true
            };

            function flatten(array) {
                var flat = Array.prototype.concat(array);
                for (var i = 0; i < flat.length; i++) {
                    if (Array.isArray(flat[i])) {
                        flat.splice(i, 1, flat[i--]);
                    }
                }
                return flat;
            }

            function createStyleSheet(options) {
                if (!(this instanceof createStyleSheet)) {
                    return new createStyleSheet(options);
                }
                options || (options = {});
                options.prefix = !options.hasOwnProperty("prefix") ? true : !!options.prefix;
                options.unit = options.hasOwnProperty("unit") ? options.unit : "px";

                this._sheet = null;
                this._prefix = null;

                this.css = function(element, styles, selector) {
                    if (styles == null) return "";
                    if (this._sheet == null) {
                        this._sheet = sharedSheet = sharedSheet || createSheet();
                    }
                    selector = element;

                    var rules = rulesFromStyles(selector, styles);
                    if (options.prefix || options.unit !== "") {
                        rules.forEach(function(set) {
                            if (options.unit !== "") {
                                addUnit(set[1], options.unit);
                            }
                        });
                    }
                    insertRules(rules, this._sheet);
                };
            }

            function createSheet() {
                if (document.head == null) {
                    throw new Error("Can't add stylesheet before <head> is available. Make sure your document has a head element.");
                }
                var style = document.createElement("style");
                style.id = "styles_" + Math.random().toString(16).slice(2, 8);
                document.head.appendChild(style);
                return style.sheet;
            }

            function rulesFromStyles(selector, styles) {
                if (!Array.isArray(styles)) styles = [styles];
                var style = {};
                var rules = [];
                styles = flatten(styles);
                styles.forEach(function(block) {
                    for (var prop in block) {
                        var value = block[prop];
                        if (isPlainObject(value) || Array.isArray(value)) {
                            rules = rules.concat(rulesFromStyles(combineSelectors(selector, prop), value));
                        } else {
                            if (prop === "content") value = "'" + value + "'";
                            style[prop] = value;
                        }
                    }
                });
                rules.push([selector, style]);
                return rules;
            }

            function insertRules(rules, sheet) {
                window.sheet = sheet;

                function hyphenate(str) {
                    return str.replace(/[A-Z]/g, function($0) {
                        return '-' + $0.toLowerCase();
                    });
                }
                rules.forEach(function(rule) {
                    var pairs = [];
                    for (var prop in rule[1]) {
                        pairs.push(hyphenate(prop) + ":" + rule[1][prop]);
                    }
                    if (pairs.length > 0) {
                        var rulez = rule[0] ? rule[0] : '';
                        sheet.insertRule(rulez + "{" + pairs.join(";") + "}", 0);
                    }
                });
            }

            function combineSelectors(parent, child) {
                var pseudoRe = /^[:\[]/;
                var parents = parent.split(","),
                    children = child.split(",");
                return parents.map(function(parent) {
                    return children.map(function(part) {
                        var separator = pseudoRe.test(part) ? "" : " ";
                        return parent + separator + part;
                    }).join(",");
                }).join(",");
            }

            function addUnit(style, unit) {
                for (var prop in style) {
                    var value = style[prop] + "";
                    if (!isNaN(value) && !unitlessProps[prop]) {
                        value = value + unit;
                    }
                    style[prop] = value;
                }
                return style;
            }

            function isPlainObject(obj) {
                return obj === Object(obj) && Object.prototype.toString === obj.toString;
            }

            var stylesheets = {};
            stylesheets.css = createStyleSheet().css;
            return stylesheets;
        };

        this.handleEvents = function() {
            if (!this.actions) return;
            var self = this;
            var bubble = false;
            if (this.actions.length) {
                this.actions.forEach(function(item) {
                    bubble = item.bubble;
                    if (item && item.element === 'self' || item && !item.element) {
                        self.elm.on(item.event, item.callback, bubble);
                    } else {
                        self.elm.on(item.event, item.element, item.callback, bubble);
                    }
                });
            } else if ($.type(this.actions) === 'object') {
                bubble = this.actions.bubble || false;
                if (!this.actions.element || this.actions.element === 'self') {
                    self.elm.on(this.actions.event, this.actions.callback, bubble);
                } else {
                    self.elm.on(this.actions.event, this.actions.element, this.actions.callback, bubble);
                }
            }
        };

        if (this.actions) {
            this.handleEvents(this.actions);
        }
    }

    _createClass(Component, [{
        key: 'setTemplate',
        value: function setTemplate(template) {
            if (template) this.renderFnc = template;
        }
    }, {
        key: 'setState',
        value: function setState(state) {
            if (state) {
                state.boundComponents.push(this);
                this.state = state;
            }
        }
    }, {
        key: 'render',
        value: function render(data, append) {
            var self = this;
            if (!self.renderFnc) {
                return;
            }
            var temp = '';
            if (!this.elm.array[0]) {
                return;
            }
            if (!data && this.state) {
                data = this.state.get();
            }

            if (Array.isArray(data)) {
                data.map(function(item, idx) {
                    temp += self.renderFnc(item, idx);
                }).join('');
            } else {
                temp = self.renderFnc(data);
            }

            if (this.styles && this.elm && this.elm.array[0]) {
                var styles = this.chuiStyle();
                if (_typeof(this.styles) !== 'object') return;
                styles.css(this.origElement, this.styles);
            }

            if (append) {
                self.elm.append(temp);
            } else {
                this.elm.array[0].textContent = '';
                self.elm.empty();
                self.elm.append(temp);
            }
        }
    }, {
        key: 'empty',
        value: function empty() {
            if (this.elm.array[0]) {
                this.elm.empty();
            }
        }
    }, {
        key: 'mount',
        value: function mount() {
            this.elm = $(this.origElement);
            this.handleEvents();
            var styles = this.chuiStyle();
            styles.css(this.origElement, this.styles);
        }
    }]);

    return Component;
}();

var dataStore = {
    id: new Date()
};

var State = function() {
    function State(data) {
        _classCallCheck(this, State);

        var d = void 0;
        if ($.type(data) === 'array') {
            d = data.slice();
        } else if ($.type(data) === 'object') {
            d = Object.create(data);
        } else {
            d = data;
        }

        this[dataStore] = d;
        this.id = ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1) + ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
        this[dataStore] = d;
        this.events = {};
        this.paused = false;
        this.boundComponents = [];
    }

    _createClass(State, [{
        key: 'renderComponents',
        value: function renderComponents() {
            if (!this.boundComponents || !this.boundComponents.length || this.paused) {
                return;
            }
            this.boundComponents.forEach(function(component) {
                component.render();
            });
        }
    }, {
        key: 'get',
        value: function get(property) {
            if (property && $.type(this[dataStore]) === 'object') {
                return this[dataStore][property];
            } else {
                return this[dataStore];
            }
        }
    }, {
        key: 'set',
        value: function set(property, data) {
            if (property === '' || property === false) {
                this[dataStore][property] = property;
                console.log('Setting property to:');
                console.log(property);
                this.renderComponents();
            } else if (!property) {
                return;
            } else if (data && $.type(this[dataStore]) === 'object') {
                this[dataStore][property] = data;
                this.renderComponents();
            } else if (!data && ($.type(this[dataStore]) !== 'object' || $.type(this[dataStore]) !== 'array')) {
                this[dataStore] = property;
                this.renderComponents();
            }
        }
    }, {
        key: 'purge',
        value: function purge() {
            if ($.type(this[dataStore]) === 'object') {
                this[dataStore] = {};
            } else if ($.type(this[dataStore]) === 'array') {
                this[dataStore] = [];
            } else {
                this[dataStore];
            }
        }
    }, {
        key: 'merge',
        value: function merge(obj) {
            if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
                return;
            } else if (_typeof(this[dataStore]) === 'object') {
                for (var key in obj) {
                    this[dataStore][key] = obj[key];
                }
                this.renderComponents();
            }
        }
    }, {
        key: 'mixin',
        value: function mixin(data) {
            if (!data) {
                return;
            }
            if ($.type(this[dataStore]) === 'object') {
                for (var key in data) {

                    if (!(key in this[dataStore])) {
                        this[dataStore][key] = data[key];
                        this.renderComponents();
                    }
                }
            } else if ($.type(this[dataStore]) === 'array') {
                this[dataStore] = this[dataStore].concat(data).unique();
                this.renderComponents();
            }
        }
    }, {
        key: 'replace',
        value: function replace(data) {
            if (data) {
                var d = void 0;
                if ($.type(data) === 'array') {
                    d = data.slice();
                } else if ($.type(data) === 'object') {
                    d = Object.create(data);
                } else {
                    d = data;
                }
                this[dataStore] = d;
                this.renderComponents(this);
            }
        }
    }, {
        key: 'remove',
        value: function remove(prop) {
            if (!prop) {
                return;
            }
            if ($.type(this[dataStore]) !== 'object') return;
            delete this[dataStore][prop];
            this.renderComponents();
        }
    }, {
        key: 'getPropAt',
        value: function getPropAt(property, position) {
            if (!property || position === undefined) {
                return;
            }
            if ($.type(this[dataStore]) === 'array') {
                if (position < 0) {
                    var pos = this[dataStore].length + position;
                    return this[dataStore][pos][property];
                } else if (position > this[dataStore].length) {
                    return;
                } else {
                    return this[dataStore][position][property];
                }
            }
        }
    }, {
        key: 'setPropAt',
        value: function setPropAt(property, value, position) {
            if (!property || value === undefined || position === undefined) {
                return;
            }
            if ($.type(this[dataStore]) === 'array') {
                if (position < 0) {
                    var pos = this[dataStore].length + position;
                    this[dataStore][pos][property] = value;
                    this.renderComponents();
                } else {
                    this[dataStore][position][property] = value;
                    this.renderComponents();
                }
            }
        }
    }, {
        key: 'push',
        value: function push(data) {
            if (!data) {
                return;
            }
            if ($.type(this[dataStore]) === 'array') {
                this[dataStore].push(data);
                this.renderComponents();
            }
        }
    }, {
        key: 'pop',
        value: function pop() {
            if ($.type(this[dataStore]) === 'array') {
                this[dataStore].pop();
                this.renderComponents();
            }
        }
    }, {
        key: 'unshift',
        value: function unshift(data) {
            if (!data) {
                return;
            } else if ($.type(this[dataStore]) === 'array') {
                this[dataStore].unshift(data);
                this.renderComponents();
            }
        }
    }, {
        key: 'shift',
        value: function shift() {
            if ($.type(this[dataStore]) === 'array') {
                this[dataStore].shift();
                this.renderComponents();
            }
        }
    }, {
        key: 'slice',
        value: function slice(start, end) {
            if (end === undefined || start === undefined) {
                return;
            }
            if ($.type(this[dataStore]) === 'array') {
                return this[dataStore].slice(start, end);
            }
        }
    }, {
        key: 'splice',
        value: function splice(start, end, data) {
            if (end === undefined || start === undefined) {
                return;
            }
            if ($.type(this[dataStore]) === 'array' && data) {
                this[dataStore].splice(start, end, data);
                this.renderComponents();
            } else if ($.type(this[dataStore]) === 'array') {
                if (start == null || !end) return;
                this[dataStore].splice(start, end);
                this.renderComponents();
            }
        }
    }, {
        key: 'insert',
        value: function insert(position, data) {
            if (data === undefined || position === undefined || typeof position !== 'number') {
                return;
            }
            if (typeof this[dataStore] === 'array') {
                if ($.type(position) !== 'number') return;
                this[dataStore].splice(position, 0, data);
                this.renderComponents();
            }
        }
    }, {
        key: 'pluck',
        value: function pluck(property) {
            if (!property) {
                return;
            } else {
                var ret = [];
                if (this[dataStore] && this[dataStore].length) {
                    var len = this[dataStore].length;
                    for (var i = 0; i < len; i++) {
                        ret.push(this[dataStore][i][property]);
                    }
                    return ret;
                }
            }
        }
    }, {
        key: 'indexOf',
        value: function indexOf(element, startFrom) {
            if (!element) {
                return;
            } else if ($.type(this[dataStore]) === 'array') {
                return this[dataStore].indexOf(element, startFrom);
            }
        }
    }, {
        key: 'find',
        value: function find(callback) {
            if (!callback) {
                return;
            } else if ($.type(this[dataStore]) === 'array') {
                return this[dataStore].find(callback);
            }
        }
    }, {
        key: 'findIndex',
        value: function findIndex(callback) {
            if (!callback) {
                return;
            } else if ($.type(this[dataStore]) === 'array') {
                return this[dataStore].findIndex(callback);
            }
        }
    }, {
        key: 'forEach',
        value: function forEach(callback) {
            if (!callback) {
                return;
            }
            if (this[dataStore] && this[dataStore].length) {
                var value = void 0;
                var i = -1;
                var len = this[dataStore].length;
                while (++i < len) {
                    value = callback.call(this[dataStore][i], this[dataStore][i], i);
                    if (value === false) {
                        break;
                    }
                }
            }
        }
    }, {
        key: 'filter',
        value: function filter() {
            for (var _len = arguments.length, _args = Array(_len), _key = 0; _key < _len; _key++) {
                _args[_key] = arguments[_key];
            }
            if (this[dataStore] && this[dataStore].length) {
                for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                    args[_key7] = arguments[_key7];
                }

                return this[dataStore].filter.apply(this[dataStore], args);
            }
        }
    }, {
        key: 'map',
        value: function map() {
            for (var _len = arguments.length, _args2 = Array(_len), _key = 0; _key < _len; _key++) {
                _args2[_key] = arguments[_key];
            }
            if (this[dataStore] && this[dataStore].length) {
                for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                    args[_key8] = arguments[_key8];
                }

                return this[dataStore].map.apply(this[dataStore], args);
            }
        }
    }, {
        key: 'reverse',
        value: function reverse() {
            if (this[dataStore] && this[dataStore].length) {
                this[dataStore].reverse();
                this.renderComponents();
            }
        }
    }, {
        key: 'sort',
        value: function sort(compareFunction) {
            if (this[dataStore] && this[dataStore].length) {
                if (compareFunction) {
                    this[dataStore].sort(compareFunction);
                    this.renderComponents();
                } else {
                    this[dataStore].sort();
                    this.renderComponents();
                }
            }
        }
    }, {
        key: 'orderBy',
        value: function orderBy() {
            for (var _len9 = arguments.length, props = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                props[_key9] = arguments[_key9];
            }

            for (var _len = arguments.length, _key = 0; _key < _len; _key++) {
                props[_key] = arguments[_key];
            }
            if (!props) return;

            var orderBy = function orderBy() {
                return function(a, b) {
                    var sortByProperty = function sortByProperty(property) {
                        var sortOrder = 1;
                        if (property[0] === "-") {
                            sortOrder = -1;
                            property = property.substr(1);
                        }
                        return function(a, b) {
                            var result = a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
                            return result * sortOrder;
                        };
                    };

                    var i = 0;
                    var result = 0;
                    var numberOfProperties = props.length;
                    while (result === 0 && i < numberOfProperties) {
                        result = sortByProperty(props[i])(a, b);
                        i++;
                    }
                    return result;
                };
            };
            if (this[dataStore] && this[dataStore].length) {
                this[dataStore].sort(orderBy.apply(null, props));
                this.renderComponents();
            }
        }
    }, {
        key: 'concat',
        value: function concat(data) {
            if (!data) {
                return;
            }
            if ($.type(this[dataStore]) === 'array') {
                var temp = this[dataStore].concat(data);
                this[dataStore] = temp;
                this.renderComponents();
            }
        }
    }, {
        key: 'unique',
        value: function unique() {
            if ($.type(this[dataStore]) === 'array') {
                this[dataStore].unique();
                this.renderComponents();
            }
        }
    }, {
        key: 'eq',
        value: function eq(position) {
            if ($.type(this[dataStore]) === 'array') {
                return this[dataStore][position];
            }
        }
    }, {
        key: 'size',
        value: function size() {
            if ($.type(this[dataStore]) === 'array') {
                return this[dataStore].length;
            } else {
                return;
            }
        }
    }]);

    return State;
}();

$.extend($, {
    isiPhone: /iphone/img.test(navigator.userAgent),
    isiPad: /ipad/img.test(navigator.userAgent),
    isiPod: /ipod/img.test(navigator.userAgent),
    isiOS: /ip(hone|od|ad)/img.test(navigator.userAgent),
    isAndroid: /android/img.test(navigator.userAgent) && !/trident/img.test(navigator.userAgent),
    isTouchEnabled: !/trident/img.test(navigator.userAgent) && !/edge/img.test(navigator.userAgent) && 'createTouch' in document,
    isStandalone: navigator.standalone || false,
    isWebkit: !/trident/img.test(navigator.userAgent) && !/edge/img.test(navigator.userAgent) && /webkit/img.test(navigator.userAgent),
    isDesktop: !/mobile/img.test(navigator.userAgent),
    isMobile: /mobile/img.test(navigator.userAgent),
    isSafari: !/edge/img.test(navigator.userAgent) && !/Chrome/img.test(navigator.userAgent) && /Safari/img.test(navigator.userAgent) && !/android/img.test(navigator.userAgent),
    isChrome: !/trident/img.test(navigator.userAgent) && !/edge/img.test(navigator.userAgent) && /Chrome/img.test(navigator.userAgent) && !((/samsung/img.test(navigator.userAgent) || /Galaxy Nexus/img.test(navigator.userAgent) || /HTC/img.test(navigator.userAgent) || /LG/img.test(navigator.userAgent)) && !/trident/img.test(navigator.userAgent) && !/edge/img.test(navigator.userAgent) && /android/i.test(navigator.userAgent) && /webkit/i.test(navigator.userAgent)),
    isNativeAndroid: (/samsung/img.test(navigator.userAgent) || /Galaxy Nexus/img.test(navigator.userAgent) || /HTC/img.test(navigator.userAgent) || /\sLG/img.test(navigator.userAgent)) && !/trident/img.test(navigator.userAgent) && !/edge/img.test(navigator.userAgent) && /android/i.test(navigator.userAgent) && /webkit/i.test(navigator.userAgent) && (/Android 3/i.test(userAgentHTC) || /Android 4/i.test(navigator.userAgent))
});
//# sourceMappingURL=chui.min.js.map
